34. Find First and Last Position of Element in Sorted Array
Medium

Given an array of integers nums sorted in non-decreasing order, find the starting
and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:

Input: nums = [], target = 0
Output: [-1,-1]

Constraints:

    0 <= nums.length <= 105
    -109 <= nums[i] <= 109
    nums is a non-decreasing array.
    -109 <= target <= 109

--- Claude ---
Ah, I think you're slightly overcomplicating it!
You wouldn't need two separate while loops within each search.

The key insight is that each binary search (leftmost and rightmost)
is *always* specialized from the very beginning - there's no "traditional phase"
followed by a "specialized phase."

For the leftmost search:
- It's a single `while left <= right` loop throughout
- When `nums[middle] < target`: move right as usual (`left = middle + 1`)
- When `nums[middle] > target`: move left as usual (`right = middle - 1`)
- When `nums[middle] == target`: **this is where it differs** - you keep searching
  left (`right = middle - 1`) instead of returning, because there might be an
  even more leftward occurrence

Same idea for the rightmost search, just biased the other direction when you find a match.

So it's really just one while loop per search,
but with a small tweak to what happens when you find the target. Make sense?